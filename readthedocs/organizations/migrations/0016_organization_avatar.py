# Generated by Django 5.2.3 on 2025-06-17 22:20

import django.core.validators
import storages.backends.s3
from django.db import migrations
from django.db import models
from django_safemigrate import Safe

import readthedocs.organizations.models


class Migration(migrations.Migration):
    safe = Safe.before_deploy()

    dependencies = [
        ("organizations", "0015_remove_unused_indexes"),
        ("projects", "0148_remove_unused_indexes"),
    ]

    operations = [
        migrations.AddField(
            model_name="historicalorganization",
            name="avatar",
            field=models.TextField(
                blank=True,
                help_text="Avatar for your organization (JPG or PNG format, max 500x500px, 750KB)",
                max_length=100,
                null=True,
                validators=[
                    django.core.validators.FileExtensionValidator(
                        allowed_extensions=["jpg", "jpeg", "png"]
                    )
                ],
                verbose_name="Avatar",
            ),
        ),
        migrations.AddField(
            model_name="organization",
            name="avatar",
            field=models.ImageField(
                blank=True,
                help_text="Avatar for your organization (JPG or PNG format, max 500x500px, 750KB)",
                null=True,
                storage=storages.backends.s3.S3Storage(
                    bucket_name="usercontent",
                    custom_domain="devthedocs.org/usercontent",
                    url_protocol="http:",
                ),
                upload_to=readthedocs.organizations.models._upload_organization_avatar_to,
                validators=[
                    django.core.validators.FileExtensionValidator(
                        allowed_extensions=["jpg", "jpeg", "png"]
                    )
                ],
                verbose_name="Avatar",
            ),
        ),
        migrations.AlterField(
            model_name="organization",
            name="projects",
            field=models.ManyToManyField(
                blank=True,
                related_name="organizations",
                to="projects.project",
                verbose_name="Projects",
            ),
        ),
    ]
